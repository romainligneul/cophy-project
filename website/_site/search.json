[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "COPHY Project",
    "section": "",
    "text": "This website provides information about the template used for new scientific projects in the COPHY team. Like the template itself, the website may change and grow over time."
  },
  {
    "objectID": "about.html#idea",
    "href": "about.html#idea",
    "title": "COPHY Project",
    "section": "Idea",
    "text": "Idea\nAll scientific project share similar components and they can therefore be integrated within a standard template, provided that the template is flexible enough. Templating does not only facilitate collaborative open science, it can also greatly accelerate the overall scientific process, thanks to a myriad of excellent tools such as Git, Quarto, Jupyter, etc."
  },
  {
    "objectID": "about.html#how-to-contribute",
    "href": "about.html#how-to-contribute",
    "title": "COPHY Project",
    "section": "How to contribute",
    "text": "How to contribute\nTo contribute to the development and conception of the template, you can write to romain.ligneul@inserm.fr. You’ll need a Github account."
  },
  {
    "objectID": "getstarted.html",
    "href": "getstarted.html",
    "title": "Getting started",
    "section": "",
    "text": "This template is leveraging modern tools that enable reproducible, open and collaborative science. So, to use it, you will have to install a few things that are very broadly used nowadays.\n\nAn integrated development environment. By default, we will use Visual Code) for this tutorial, but you could work also with JupyterLab, Rstudio or Neovim. Other IDEs such as PyCharm or Eclipse are also possible but less recommended.\nA virtual environment manager. We will use Anaconda that greatly facilitates the creation and management of virtual environments based on Python (but not only). If asked about by the installer, make sure to tick Add Anaconda to my PATH environment variable.\nA version-control software. We will use Git and since this repository is on Github, we’ll also use the Github CLI (Github command line interface)\nAn open-source scientific and technical publishing system. We will use Quarto to export our productions to various formats. Quarto is a young but very promising and potent framework dedicated to scientific publishing in all its forms (i.e., dashboards, reports, manuscripts, books, websites, presentations). Make sure to download version 1.4 or above. For now, it is only available from the Pre-release tab. Uninstall the previous version beforehand if you had installed one already.\n\nThe installation of these tools should not take long (~5 minutes), since they are all lightweight and that you just have to follow the default installation procedures."
  },
  {
    "objectID": "getstarted.html#installation",
    "href": "getstarted.html#installation",
    "title": "Getting started",
    "section": "",
    "text": "This template is leveraging modern tools that enable reproducible, open and collaborative science. So, to use it, you will have to install a few things that are very broadly used nowadays.\n\nAn integrated development environment. By default, we will use Visual Code) for this tutorial, but you could work also with JupyterLab, Rstudio or Neovim. Other IDEs such as PyCharm or Eclipse are also possible but less recommended.\nA virtual environment manager. We will use Anaconda that greatly facilitates the creation and management of virtual environments based on Python (but not only). If asked about by the installer, make sure to tick Add Anaconda to my PATH environment variable.\nA version-control software. We will use Git and since this repository is on Github, we’ll also use the Github CLI (Github command line interface)\nAn open-source scientific and technical publishing system. We will use Quarto to export our productions to various formats. Quarto is a young but very promising and potent framework dedicated to scientific publishing in all its forms (i.e., dashboards, reports, manuscripts, books, websites, presentations). Make sure to download version 1.4 or above. For now, it is only available from the Pre-release tab. Uninstall the previous version beforehand if you had installed one already.\n\nThe installation of these tools should not take long (~5 minutes), since they are all lightweight and that you just have to follow the default installation procedures."
  },
  {
    "objectID": "getstarted.html#configuration",
    "href": "getstarted.html#configuration",
    "title": "Getting started",
    "section": "Configuration",
    "text": "Configuration\nThe following steps assume that the 5 tools described above have been successfully installed. They should take 10-15 minutes to complete.\n\nWork from the command line\nTo use the template and the tools above, you will need to work a little bit from a Terminal. If you have Visual Studio Code or any other good IDE, you will be able to open a terminal from inside it.\nBy default, VS code opens a “Powershell” terminal on windows, but it is better to work from a simple command line, so press Ctrl+Shit+P (a little search field will appear at the top), type “terminal select default”, press Enter and select “Command Prompt”.\nIn VS code you can then open the terminal through the top menu (Terminal -&gt; New Terminal). You could also do Ctrl+Shift+P, type “Create New Terminal” and press enter. In general, all actions and settings of VScode can be searched and accessed through Ctrl+Shift+P.\n\n\nLook for a convenient place on your computer\nAny command line interface allows you to cd to any place of your computer. On Windows, if you need to move from one drive to another, you’ll have first to type the letter of your drive (like this M: or D:). If you need to create a dir in the current directory, you can use the function mkdir WhateverNewFolderName.\n\n\nNever use a path containing spaces.\nNever combine systems like Google Drive or Dropbox with version-controlled folder.\nThe shortest the path the better (for example, something like C:/Projects/ is great)\n\n\nFor the rest of this tutorial, we will assume that you work in: C:/Projects/ but you could work in any other folder. So, if we don’t have that folder already we can type the following commands.\nC:\nmkdir Projects\ncd Projects\n\n\nLog in Github and get the template\n\nProper method\n\nGo on Github and login into your account (create one if you do not have one already).\nVisit the following page: https://github.com/romainligneul/cophy-project and click on the green button Use this template -&gt; Create a new repository. Give the repository any name you want. Hereafter, we will assume that you named it mycophyproject. You can keep it public (if you are ok for anyone to see it) or private.\nOnce it has generated the repository, click on the green button Code and copy paste the address of the repository (e.g. `https://github.com/yourgitname/mycophyproject.git)\nReturn to your command line and type gh auth login (this step requires the Github CLI installed). Follows the instructions to connect your command line with your Github account.\nFinally, type git clone https://github.com/yourgitname/mycophyproject.git.\n\nThis proper method allows you: (i) to use private repositories and (ii) to edit the repositories. Note that Github CLI (gh) is not strictly necessary here, but it helps.\n\n\nQuick and dirty\nJust type git clone https://github.com/romainligneul/cophy-project. Doing so will immediately get you the template repository. You won’t even need a Github account or the Gitlab CLI, but it means that you will have to configure your Git by yourself (which may be the way to go if you prefer Gitlab over Git for example)\n\n\nQuicker and dirtier\nJust visit https://github.com/romainligneul/cophy-project, click the gray button Code -&gt; Download Zip and unzip where you want. If you choose this way, you don’t even need to install Git. Although, it might be useless to do this tutorial if you don’t want to use Git.\n\n\n\nFinish the configuration\nAssuming that you entered in the newly created folder already (e.g. by typing cd mycophyproject or cd C:/Projects/mycophyproject), there is just a few commands to run to finalize the installation of the template.\n\ntype conda env create --file=quarto-env.yml\ntype conda activate quarto-env\ntype python -m ipykernel install --user --name quarto-env\ntype quarto install tinytex (optional, to generate PDF documents)\n\nIf the conda commands throw an error (it should not if you read carefully the installation guidelines above), check this troubleshooting.\nThat’s it! You can now use and modify the template to your needs. Check the corresponding section for more guidance on how to use and develop the template together with Quarto.\nIf you encountered an issue, you can report it here"
  }
]